
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model user
 * 
 */
export type user = {
  id: number
  createdAt: Date
  email: string
  name: string | null
  passwrd: string | null
  role: ROLE
}

/**
 * Model article
 * 
 */
export type article = {
  id: number
  createdAt: Date
  title: string
  content: string | null
  published: boolean
  authorId: number
  image: string | null
}

/**
 * Model commentaire
 * 
 */
export type commentaire = {
  id: number
  createdAt: Date
  comment: string
  writtenById: number
  postId: number
}

/**
 * Model categorie
 * 
 */
export type categorie = {
  id: number
  createdAt: Date
  updatedAt: Date
  nom: string
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const ROLE: {
  ADMIN: 'ADMIN',
  AUTHOR: 'AUTHOR',
  GUEST: 'GUEST'
};

export type ROLE = (typeof ROLE)[keyof typeof ROLE]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject>;

  /**
   * `prisma.article`: Exposes CRUD operations for the **article** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Articles
    * const articles = await prisma.article.findMany()
    * ```
    */
  get article(): Prisma.articleDelegate<GlobalReject>;

  /**
   * `prisma.commentaire`: Exposes CRUD operations for the **commentaire** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Commentaires
    * const commentaires = await prisma.commentaire.findMany()
    * ```
    */
  get commentaire(): Prisma.commentaireDelegate<GlobalReject>;

  /**
   * `prisma.categorie`: Exposes CRUD operations for the **categorie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categorie.findMany()
    * ```
    */
  get categorie(): Prisma.categorieDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.14.0
   * Query Engine version: 2b0c12756921c891fec4f68d9444e18c7d5d4a6a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    user: 'user',
    article: 'article',
    commentaire: 'commentaire',
    categorie: 'categorie'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    comments: number
    posts: number
  }

  export type UserCountOutputTypeSelect = {
    comments?: boolean
    posts?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type ArticleCountOutputType
   */


  export type ArticleCountOutputType = {
    comments: number
    categor: number
  }

  export type ArticleCountOutputTypeSelect = {
    comments?: boolean
    categor?: boolean
  }

  export type ArticleCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ArticleCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ArticleCountOutputType
    : S extends undefined
    ? never
    : S extends ArticleCountOutputTypeArgs
    ?'include' extends U
    ? ArticleCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ArticleCountOutputType ? ArticleCountOutputType[P] : never
  } 
    : ArticleCountOutputType
  : ArticleCountOutputType




  // Custom InputTypes

  /**
   * ArticleCountOutputType without action
   */
  export type ArticleCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ArticleCountOutputType
     * 
    **/
    select?: ArticleCountOutputTypeSelect | null
  }



  /**
   * Count Type CategorieCountOutputType
   */


  export type CategorieCountOutputType = {
    articles: number
  }

  export type CategorieCountOutputTypeSelect = {
    articles?: boolean
  }

  export type CategorieCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CategorieCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CategorieCountOutputType
    : S extends undefined
    ? never
    : S extends CategorieCountOutputTypeArgs
    ?'include' extends U
    ? CategorieCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CategorieCountOutputType ? CategorieCountOutputType[P] : never
  } 
    : CategorieCountOutputType
  : CategorieCountOutputType




  // Custom InputTypes

  /**
   * CategorieCountOutputType without action
   */
  export type CategorieCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategorieCountOutputType
     * 
    **/
    select?: CategorieCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model user
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    email: string | null
    name: string | null
    passwrd: string | null
    role: ROLE | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    email: string | null
    name: string | null
    passwrd: string | null
    role: ROLE | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    email: number
    name: number
    passwrd: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    email?: true
    name?: true
    passwrd?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    email?: true
    name?: true
    passwrd?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    email?: true
    name?: true
    passwrd?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which user to aggregate.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: userWhereInput
    orderBy?: Enumerable<userOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    createdAt: Date
    email: string
    name: string | null
    passwrd: string | null
    role: ROLE
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect = {
    id?: boolean
    createdAt?: boolean
    email?: boolean
    name?: boolean
    passwrd?: boolean
    role?: boolean
    comments?: boolean | commentaireFindManyArgs
    posts?: boolean | articleFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userInclude = {
    comments?: boolean | commentaireFindManyArgs
    posts?: boolean | articleFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userGetPayload<
    S extends boolean | null | undefined | userArgs,
    U = keyof S
      > = S extends true
        ? user
    : S extends undefined
    ? never
    : S extends userArgs | userFindManyArgs
    ?'include' extends U
    ? user  & {
    [P in TrueKeys<S['include']>]:
        P extends 'comments' ? Array < commentaireGetPayload<S['include'][P]>>  :
        P extends 'posts' ? Array < articleGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'comments' ? Array < commentaireGetPayload<S['select'][P]>>  :
        P extends 'posts' ? Array < articleGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof user ? user[P] : never
  } 
    : user
  : user


  type userCountArgs = Merge<
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface userDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs>(
      args?: SelectSubset<T, userFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user>>, PrismaPromise<Array<userGetPayload<T>>>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs>(
      args: SelectSubset<T, userCreateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs>(
      args?: SelectSubset<T, userCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs>(
      args: SelectSubset<T, userDeleteArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs>(
      args: SelectSubset<T, userUpdateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs>(
      args?: SelectSubset<T, userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs>(
      args: SelectSubset<T, userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs>(
      args: SelectSubset<T, userUpsertArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    comments<T extends commentaireFindManyArgs = {}>(args?: Subset<T, commentaireFindManyArgs>): CheckSelect<T, PrismaPromise<Array<commentaire>>, PrismaPromise<Array<commentaireGetPayload<T>>>>;

    posts<T extends articleFindManyArgs = {}>(args?: Subset<T, articleFindManyArgs>): CheckSelect<T, PrismaPromise<Array<article>>, PrismaPromise<Array<articleGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Throw an Error if a user can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Throw an Error if a user can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user findMany
   */
  export type userFindManyArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The data needed to create a user.
     * 
    **/
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<userCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The data needed to update a user.
     * 
    **/
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The filter to search for the user to update in case it exists.
     * 
    **/
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     * 
    **/
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter which user to delete.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user without action
   */
  export type userArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
  }



  /**
   * Model article
   */


  export type AggregateArticle = {
    _count: ArticleCountAggregateOutputType | null
    _avg: ArticleAvgAggregateOutputType | null
    _sum: ArticleSumAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  export type ArticleAvgAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type ArticleSumAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type ArticleMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    title: string | null
    content: string | null
    published: boolean | null
    authorId: number | null
    image: string | null
  }

  export type ArticleMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    title: string | null
    content: string | null
    published: boolean | null
    authorId: number | null
    image: string | null
  }

  export type ArticleCountAggregateOutputType = {
    id: number
    createdAt: number
    title: number
    content: number
    published: number
    authorId: number
    image: number
    _all: number
  }


  export type ArticleAvgAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type ArticleSumAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type ArticleMinAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    content?: true
    published?: true
    authorId?: true
    image?: true
  }

  export type ArticleMaxAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    content?: true
    published?: true
    authorId?: true
    image?: true
  }

  export type ArticleCountAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    content?: true
    published?: true
    authorId?: true
    image?: true
    _all?: true
  }

  export type ArticleAggregateArgs = {
    /**
     * Filter which article to aggregate.
     * 
    **/
    where?: articleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of articles to fetch.
     * 
    **/
    orderBy?: Enumerable<articleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: articleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` articles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` articles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned articles
    **/
    _count?: true | ArticleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArticleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArticleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArticleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArticleMaxAggregateInputType
  }

  export type GetArticleAggregateType<T extends ArticleAggregateArgs> = {
        [P in keyof T & keyof AggregateArticle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArticle[P]>
      : GetScalarType<T[P], AggregateArticle[P]>
  }




  export type ArticleGroupByArgs = {
    where?: articleWhereInput
    orderBy?: Enumerable<articleOrderByWithAggregationInput>
    by: Array<ArticleScalarFieldEnum>
    having?: articleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArticleCountAggregateInputType | true
    _avg?: ArticleAvgAggregateInputType
    _sum?: ArticleSumAggregateInputType
    _min?: ArticleMinAggregateInputType
    _max?: ArticleMaxAggregateInputType
  }


  export type ArticleGroupByOutputType = {
    id: number
    createdAt: Date
    title: string
    content: string | null
    published: boolean
    authorId: number
    image: string | null
    _count: ArticleCountAggregateOutputType | null
    _avg: ArticleAvgAggregateOutputType | null
    _sum: ArticleSumAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  type GetArticleGroupByPayload<T extends ArticleGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ArticleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArticleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArticleGroupByOutputType[P]>
            : GetScalarType<T[P], ArticleGroupByOutputType[P]>
        }
      >
    >


  export type articleSelect = {
    id?: boolean
    createdAt?: boolean
    title?: boolean
    content?: boolean
    published?: boolean
    authorId?: boolean
    image?: boolean
    author?: boolean | userArgs
    comments?: boolean | commentaireFindManyArgs
    categor?: boolean | categorieFindManyArgs
    _count?: boolean | ArticleCountOutputTypeArgs
  }

  export type articleInclude = {
    author?: boolean | userArgs
    comments?: boolean | commentaireFindManyArgs
    categor?: boolean | categorieFindManyArgs
    _count?: boolean | ArticleCountOutputTypeArgs
  }

  export type articleGetPayload<
    S extends boolean | null | undefined | articleArgs,
    U = keyof S
      > = S extends true
        ? article
    : S extends undefined
    ? never
    : S extends articleArgs | articleFindManyArgs
    ?'include' extends U
    ? article  & {
    [P in TrueKeys<S['include']>]:
        P extends 'author' ? userGetPayload<S['include'][P]> :
        P extends 'comments' ? Array < commentaireGetPayload<S['include'][P]>>  :
        P extends 'categor' ? Array < categorieGetPayload<S['include'][P]>>  :
        P extends '_count' ? ArticleCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'author' ? userGetPayload<S['select'][P]> :
        P extends 'comments' ? Array < commentaireGetPayload<S['select'][P]>>  :
        P extends 'categor' ? Array < categorieGetPayload<S['select'][P]>>  :
        P extends '_count' ? ArticleCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof article ? article[P] : never
  } 
    : article
  : article


  type articleCountArgs = Merge<
    Omit<articleFindManyArgs, 'select' | 'include'> & {
      select?: ArticleCountAggregateInputType | true
    }
  >

  export interface articleDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Article that matches the filter.
     * @param {articleFindUniqueArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends articleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, articleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'article'> extends True ? CheckSelect<T, Prisma__articleClient<article>, Prisma__articleClient<articleGetPayload<T>>> : CheckSelect<T, Prisma__articleClient<article | null >, Prisma__articleClient<articleGetPayload<T> | null >>

    /**
     * Find the first Article that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {articleFindFirstArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends articleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, articleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'article'> extends True ? CheckSelect<T, Prisma__articleClient<article>, Prisma__articleClient<articleGetPayload<T>>> : CheckSelect<T, Prisma__articleClient<article | null >, Prisma__articleClient<articleGetPayload<T> | null >>

    /**
     * Find zero or more Articles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {articleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Articles
     * const articles = await prisma.article.findMany()
     * 
     * // Get first 10 Articles
     * const articles = await prisma.article.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const articleWithIdOnly = await prisma.article.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends articleFindManyArgs>(
      args?: SelectSubset<T, articleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<article>>, PrismaPromise<Array<articleGetPayload<T>>>>

    /**
     * Create a Article.
     * @param {articleCreateArgs} args - Arguments to create a Article.
     * @example
     * // Create one Article
     * const Article = await prisma.article.create({
     *   data: {
     *     // ... data to create a Article
     *   }
     * })
     * 
    **/
    create<T extends articleCreateArgs>(
      args: SelectSubset<T, articleCreateArgs>
    ): CheckSelect<T, Prisma__articleClient<article>, Prisma__articleClient<articleGetPayload<T>>>

    /**
     * Create many Articles.
     *     @param {articleCreateManyArgs} args - Arguments to create many Articles.
     *     @example
     *     // Create many Articles
     *     const article = await prisma.article.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends articleCreateManyArgs>(
      args?: SelectSubset<T, articleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Article.
     * @param {articleDeleteArgs} args - Arguments to delete one Article.
     * @example
     * // Delete one Article
     * const Article = await prisma.article.delete({
     *   where: {
     *     // ... filter to delete one Article
     *   }
     * })
     * 
    **/
    delete<T extends articleDeleteArgs>(
      args: SelectSubset<T, articleDeleteArgs>
    ): CheckSelect<T, Prisma__articleClient<article>, Prisma__articleClient<articleGetPayload<T>>>

    /**
     * Update one Article.
     * @param {articleUpdateArgs} args - Arguments to update one Article.
     * @example
     * // Update one Article
     * const article = await prisma.article.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends articleUpdateArgs>(
      args: SelectSubset<T, articleUpdateArgs>
    ): CheckSelect<T, Prisma__articleClient<article>, Prisma__articleClient<articleGetPayload<T>>>

    /**
     * Delete zero or more Articles.
     * @param {articleDeleteManyArgs} args - Arguments to filter Articles to delete.
     * @example
     * // Delete a few Articles
     * const { count } = await prisma.article.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends articleDeleteManyArgs>(
      args?: SelectSubset<T, articleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {articleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Articles
     * const article = await prisma.article.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends articleUpdateManyArgs>(
      args: SelectSubset<T, articleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Article.
     * @param {articleUpsertArgs} args - Arguments to update or create a Article.
     * @example
     * // Update or create a Article
     * const article = await prisma.article.upsert({
     *   create: {
     *     // ... data to create a Article
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Article we want to update
     *   }
     * })
    **/
    upsert<T extends articleUpsertArgs>(
      args: SelectSubset<T, articleUpsertArgs>
    ): CheckSelect<T, Prisma__articleClient<article>, Prisma__articleClient<articleGetPayload<T>>>

    /**
     * Count the number of Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {articleCountArgs} args - Arguments to filter Articles to count.
     * @example
     * // Count the number of Articles
     * const count = await prisma.article.count({
     *   where: {
     *     // ... the filter for the Articles we want to count
     *   }
     * })
    **/
    count<T extends articleCountArgs>(
      args?: Subset<T, articleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArticleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArticleAggregateArgs>(args: Subset<T, ArticleAggregateArgs>): PrismaPromise<GetArticleAggregateType<T>>

    /**
     * Group by Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArticleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArticleGroupByArgs['orderBy'] }
        : { orderBy?: ArticleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArticleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArticleGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for article.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__articleClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    author<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>;

    comments<T extends commentaireFindManyArgs = {}>(args?: Subset<T, commentaireFindManyArgs>): CheckSelect<T, PrismaPromise<Array<commentaire>>, PrismaPromise<Array<commentaireGetPayload<T>>>>;

    categor<T extends categorieFindManyArgs = {}>(args?: Subset<T, categorieFindManyArgs>): CheckSelect<T, PrismaPromise<Array<categorie>>, PrismaPromise<Array<categorieGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * article findUnique
   */
  export type articleFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the article
     * 
    **/
    select?: articleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: articleInclude | null
    /**
     * Throw an Error if a article can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which article to fetch.
     * 
    **/
    where: articleWhereUniqueInput
  }


  /**
   * article findFirst
   */
  export type articleFindFirstArgs = {
    /**
     * Select specific fields to fetch from the article
     * 
    **/
    select?: articleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: articleInclude | null
    /**
     * Throw an Error if a article can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which article to fetch.
     * 
    **/
    where?: articleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of articles to fetch.
     * 
    **/
    orderBy?: Enumerable<articleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for articles.
     * 
    **/
    cursor?: articleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` articles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` articles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of articles.
     * 
    **/
    distinct?: Enumerable<ArticleScalarFieldEnum>
  }


  /**
   * article findMany
   */
  export type articleFindManyArgs = {
    /**
     * Select specific fields to fetch from the article
     * 
    **/
    select?: articleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: articleInclude | null
    /**
     * Filter, which articles to fetch.
     * 
    **/
    where?: articleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of articles to fetch.
     * 
    **/
    orderBy?: Enumerable<articleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing articles.
     * 
    **/
    cursor?: articleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` articles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` articles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ArticleScalarFieldEnum>
  }


  /**
   * article create
   */
  export type articleCreateArgs = {
    /**
     * Select specific fields to fetch from the article
     * 
    **/
    select?: articleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: articleInclude | null
    /**
     * The data needed to create a article.
     * 
    **/
    data: XOR<articleCreateInput, articleUncheckedCreateInput>
  }


  /**
   * article createMany
   */
  export type articleCreateManyArgs = {
    /**
     * The data used to create many articles.
     * 
    **/
    data: Enumerable<articleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * article update
   */
  export type articleUpdateArgs = {
    /**
     * Select specific fields to fetch from the article
     * 
    **/
    select?: articleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: articleInclude | null
    /**
     * The data needed to update a article.
     * 
    **/
    data: XOR<articleUpdateInput, articleUncheckedUpdateInput>
    /**
     * Choose, which article to update.
     * 
    **/
    where: articleWhereUniqueInput
  }


  /**
   * article updateMany
   */
  export type articleUpdateManyArgs = {
    /**
     * The data used to update articles.
     * 
    **/
    data: XOR<articleUpdateManyMutationInput, articleUncheckedUpdateManyInput>
    /**
     * Filter which articles to update
     * 
    **/
    where?: articleWhereInput
  }


  /**
   * article upsert
   */
  export type articleUpsertArgs = {
    /**
     * Select specific fields to fetch from the article
     * 
    **/
    select?: articleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: articleInclude | null
    /**
     * The filter to search for the article to update in case it exists.
     * 
    **/
    where: articleWhereUniqueInput
    /**
     * In case the article found by the `where` argument doesn't exist, create a new article with this data.
     * 
    **/
    create: XOR<articleCreateInput, articleUncheckedCreateInput>
    /**
     * In case the article was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<articleUpdateInput, articleUncheckedUpdateInput>
  }


  /**
   * article delete
   */
  export type articleDeleteArgs = {
    /**
     * Select specific fields to fetch from the article
     * 
    **/
    select?: articleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: articleInclude | null
    /**
     * Filter which article to delete.
     * 
    **/
    where: articleWhereUniqueInput
  }


  /**
   * article deleteMany
   */
  export type articleDeleteManyArgs = {
    /**
     * Filter which articles to delete
     * 
    **/
    where?: articleWhereInput
  }


  /**
   * article without action
   */
  export type articleArgs = {
    /**
     * Select specific fields to fetch from the article
     * 
    **/
    select?: articleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: articleInclude | null
  }



  /**
   * Model commentaire
   */


  export type AggregateCommentaire = {
    _count: CommentaireCountAggregateOutputType | null
    _avg: CommentaireAvgAggregateOutputType | null
    _sum: CommentaireSumAggregateOutputType | null
    _min: CommentaireMinAggregateOutputType | null
    _max: CommentaireMaxAggregateOutputType | null
  }

  export type CommentaireAvgAggregateOutputType = {
    id: number | null
    writtenById: number | null
    postId: number | null
  }

  export type CommentaireSumAggregateOutputType = {
    id: number | null
    writtenById: number | null
    postId: number | null
  }

  export type CommentaireMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    comment: string | null
    writtenById: number | null
    postId: number | null
  }

  export type CommentaireMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    comment: string | null
    writtenById: number | null
    postId: number | null
  }

  export type CommentaireCountAggregateOutputType = {
    id: number
    createdAt: number
    comment: number
    writtenById: number
    postId: number
    _all: number
  }


  export type CommentaireAvgAggregateInputType = {
    id?: true
    writtenById?: true
    postId?: true
  }

  export type CommentaireSumAggregateInputType = {
    id?: true
    writtenById?: true
    postId?: true
  }

  export type CommentaireMinAggregateInputType = {
    id?: true
    createdAt?: true
    comment?: true
    writtenById?: true
    postId?: true
  }

  export type CommentaireMaxAggregateInputType = {
    id?: true
    createdAt?: true
    comment?: true
    writtenById?: true
    postId?: true
  }

  export type CommentaireCountAggregateInputType = {
    id?: true
    createdAt?: true
    comment?: true
    writtenById?: true
    postId?: true
    _all?: true
  }

  export type CommentaireAggregateArgs = {
    /**
     * Filter which commentaire to aggregate.
     * 
    **/
    where?: commentaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commentaires to fetch.
     * 
    **/
    orderBy?: Enumerable<commentaireOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: commentaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commentaires from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commentaires.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned commentaires
    **/
    _count?: true | CommentaireCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentaireAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentaireSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentaireMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentaireMaxAggregateInputType
  }

  export type GetCommentaireAggregateType<T extends CommentaireAggregateArgs> = {
        [P in keyof T & keyof AggregateCommentaire]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommentaire[P]>
      : GetScalarType<T[P], AggregateCommentaire[P]>
  }




  export type CommentaireGroupByArgs = {
    where?: commentaireWhereInput
    orderBy?: Enumerable<commentaireOrderByWithAggregationInput>
    by: Array<CommentaireScalarFieldEnum>
    having?: commentaireScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentaireCountAggregateInputType | true
    _avg?: CommentaireAvgAggregateInputType
    _sum?: CommentaireSumAggregateInputType
    _min?: CommentaireMinAggregateInputType
    _max?: CommentaireMaxAggregateInputType
  }


  export type CommentaireGroupByOutputType = {
    id: number
    createdAt: Date
    comment: string
    writtenById: number
    postId: number
    _count: CommentaireCountAggregateOutputType | null
    _avg: CommentaireAvgAggregateOutputType | null
    _sum: CommentaireSumAggregateOutputType | null
    _min: CommentaireMinAggregateOutputType | null
    _max: CommentaireMaxAggregateOutputType | null
  }

  type GetCommentaireGroupByPayload<T extends CommentaireGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CommentaireGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentaireGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentaireGroupByOutputType[P]>
            : GetScalarType<T[P], CommentaireGroupByOutputType[P]>
        }
      >
    >


  export type commentaireSelect = {
    id?: boolean
    createdAt?: boolean
    comment?: boolean
    writtenById?: boolean
    postId?: boolean
    writtenBy?: boolean | userArgs
    post?: boolean | articleArgs
  }

  export type commentaireInclude = {
    writtenBy?: boolean | userArgs
    post?: boolean | articleArgs
  }

  export type commentaireGetPayload<
    S extends boolean | null | undefined | commentaireArgs,
    U = keyof S
      > = S extends true
        ? commentaire
    : S extends undefined
    ? never
    : S extends commentaireArgs | commentaireFindManyArgs
    ?'include' extends U
    ? commentaire  & {
    [P in TrueKeys<S['include']>]:
        P extends 'writtenBy' ? userGetPayload<S['include'][P]> :
        P extends 'post' ? articleGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'writtenBy' ? userGetPayload<S['select'][P]> :
        P extends 'post' ? articleGetPayload<S['select'][P]> :  P extends keyof commentaire ? commentaire[P] : never
  } 
    : commentaire
  : commentaire


  type commentaireCountArgs = Merge<
    Omit<commentaireFindManyArgs, 'select' | 'include'> & {
      select?: CommentaireCountAggregateInputType | true
    }
  >

  export interface commentaireDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Commentaire that matches the filter.
     * @param {commentaireFindUniqueArgs} args - Arguments to find a Commentaire
     * @example
     * // Get one Commentaire
     * const commentaire = await prisma.commentaire.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends commentaireFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, commentaireFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'commentaire'> extends True ? CheckSelect<T, Prisma__commentaireClient<commentaire>, Prisma__commentaireClient<commentaireGetPayload<T>>> : CheckSelect<T, Prisma__commentaireClient<commentaire | null >, Prisma__commentaireClient<commentaireGetPayload<T> | null >>

    /**
     * Find the first Commentaire that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentaireFindFirstArgs} args - Arguments to find a Commentaire
     * @example
     * // Get one Commentaire
     * const commentaire = await prisma.commentaire.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends commentaireFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, commentaireFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'commentaire'> extends True ? CheckSelect<T, Prisma__commentaireClient<commentaire>, Prisma__commentaireClient<commentaireGetPayload<T>>> : CheckSelect<T, Prisma__commentaireClient<commentaire | null >, Prisma__commentaireClient<commentaireGetPayload<T> | null >>

    /**
     * Find zero or more Commentaires that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentaireFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Commentaires
     * const commentaires = await prisma.commentaire.findMany()
     * 
     * // Get first 10 Commentaires
     * const commentaires = await prisma.commentaire.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentaireWithIdOnly = await prisma.commentaire.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends commentaireFindManyArgs>(
      args?: SelectSubset<T, commentaireFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<commentaire>>, PrismaPromise<Array<commentaireGetPayload<T>>>>

    /**
     * Create a Commentaire.
     * @param {commentaireCreateArgs} args - Arguments to create a Commentaire.
     * @example
     * // Create one Commentaire
     * const Commentaire = await prisma.commentaire.create({
     *   data: {
     *     // ... data to create a Commentaire
     *   }
     * })
     * 
    **/
    create<T extends commentaireCreateArgs>(
      args: SelectSubset<T, commentaireCreateArgs>
    ): CheckSelect<T, Prisma__commentaireClient<commentaire>, Prisma__commentaireClient<commentaireGetPayload<T>>>

    /**
     * Create many Commentaires.
     *     @param {commentaireCreateManyArgs} args - Arguments to create many Commentaires.
     *     @example
     *     // Create many Commentaires
     *     const commentaire = await prisma.commentaire.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends commentaireCreateManyArgs>(
      args?: SelectSubset<T, commentaireCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Commentaire.
     * @param {commentaireDeleteArgs} args - Arguments to delete one Commentaire.
     * @example
     * // Delete one Commentaire
     * const Commentaire = await prisma.commentaire.delete({
     *   where: {
     *     // ... filter to delete one Commentaire
     *   }
     * })
     * 
    **/
    delete<T extends commentaireDeleteArgs>(
      args: SelectSubset<T, commentaireDeleteArgs>
    ): CheckSelect<T, Prisma__commentaireClient<commentaire>, Prisma__commentaireClient<commentaireGetPayload<T>>>

    /**
     * Update one Commentaire.
     * @param {commentaireUpdateArgs} args - Arguments to update one Commentaire.
     * @example
     * // Update one Commentaire
     * const commentaire = await prisma.commentaire.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends commentaireUpdateArgs>(
      args: SelectSubset<T, commentaireUpdateArgs>
    ): CheckSelect<T, Prisma__commentaireClient<commentaire>, Prisma__commentaireClient<commentaireGetPayload<T>>>

    /**
     * Delete zero or more Commentaires.
     * @param {commentaireDeleteManyArgs} args - Arguments to filter Commentaires to delete.
     * @example
     * // Delete a few Commentaires
     * const { count } = await prisma.commentaire.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends commentaireDeleteManyArgs>(
      args?: SelectSubset<T, commentaireDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Commentaires.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentaireUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Commentaires
     * const commentaire = await prisma.commentaire.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends commentaireUpdateManyArgs>(
      args: SelectSubset<T, commentaireUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Commentaire.
     * @param {commentaireUpsertArgs} args - Arguments to update or create a Commentaire.
     * @example
     * // Update or create a Commentaire
     * const commentaire = await prisma.commentaire.upsert({
     *   create: {
     *     // ... data to create a Commentaire
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Commentaire we want to update
     *   }
     * })
    **/
    upsert<T extends commentaireUpsertArgs>(
      args: SelectSubset<T, commentaireUpsertArgs>
    ): CheckSelect<T, Prisma__commentaireClient<commentaire>, Prisma__commentaireClient<commentaireGetPayload<T>>>

    /**
     * Count the number of Commentaires.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentaireCountArgs} args - Arguments to filter Commentaires to count.
     * @example
     * // Count the number of Commentaires
     * const count = await prisma.commentaire.count({
     *   where: {
     *     // ... the filter for the Commentaires we want to count
     *   }
     * })
    **/
    count<T extends commentaireCountArgs>(
      args?: Subset<T, commentaireCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentaireCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Commentaire.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentaireAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentaireAggregateArgs>(args: Subset<T, CommentaireAggregateArgs>): PrismaPromise<GetCommentaireAggregateType<T>>

    /**
     * Group by Commentaire.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentaireGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentaireGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentaireGroupByArgs['orderBy'] }
        : { orderBy?: CommentaireGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentaireGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentaireGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for commentaire.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__commentaireClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    writtenBy<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | null >, Prisma__userClient<userGetPayload<T> | null >>;

    post<T extends articleArgs = {}>(args?: Subset<T, articleArgs>): CheckSelect<T, Prisma__articleClient<article | null >, Prisma__articleClient<articleGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * commentaire findUnique
   */
  export type commentaireFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the commentaire
     * 
    **/
    select?: commentaireSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentaireInclude | null
    /**
     * Throw an Error if a commentaire can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which commentaire to fetch.
     * 
    **/
    where: commentaireWhereUniqueInput
  }


  /**
   * commentaire findFirst
   */
  export type commentaireFindFirstArgs = {
    /**
     * Select specific fields to fetch from the commentaire
     * 
    **/
    select?: commentaireSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentaireInclude | null
    /**
     * Throw an Error if a commentaire can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which commentaire to fetch.
     * 
    **/
    where?: commentaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commentaires to fetch.
     * 
    **/
    orderBy?: Enumerable<commentaireOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for commentaires.
     * 
    **/
    cursor?: commentaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commentaires from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commentaires.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of commentaires.
     * 
    **/
    distinct?: Enumerable<CommentaireScalarFieldEnum>
  }


  /**
   * commentaire findMany
   */
  export type commentaireFindManyArgs = {
    /**
     * Select specific fields to fetch from the commentaire
     * 
    **/
    select?: commentaireSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentaireInclude | null
    /**
     * Filter, which commentaires to fetch.
     * 
    **/
    where?: commentaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commentaires to fetch.
     * 
    **/
    orderBy?: Enumerable<commentaireOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing commentaires.
     * 
    **/
    cursor?: commentaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commentaires from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commentaires.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CommentaireScalarFieldEnum>
  }


  /**
   * commentaire create
   */
  export type commentaireCreateArgs = {
    /**
     * Select specific fields to fetch from the commentaire
     * 
    **/
    select?: commentaireSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentaireInclude | null
    /**
     * The data needed to create a commentaire.
     * 
    **/
    data: XOR<commentaireCreateInput, commentaireUncheckedCreateInput>
  }


  /**
   * commentaire createMany
   */
  export type commentaireCreateManyArgs = {
    /**
     * The data used to create many commentaires.
     * 
    **/
    data: Enumerable<commentaireCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * commentaire update
   */
  export type commentaireUpdateArgs = {
    /**
     * Select specific fields to fetch from the commentaire
     * 
    **/
    select?: commentaireSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentaireInclude | null
    /**
     * The data needed to update a commentaire.
     * 
    **/
    data: XOR<commentaireUpdateInput, commentaireUncheckedUpdateInput>
    /**
     * Choose, which commentaire to update.
     * 
    **/
    where: commentaireWhereUniqueInput
  }


  /**
   * commentaire updateMany
   */
  export type commentaireUpdateManyArgs = {
    /**
     * The data used to update commentaires.
     * 
    **/
    data: XOR<commentaireUpdateManyMutationInput, commentaireUncheckedUpdateManyInput>
    /**
     * Filter which commentaires to update
     * 
    **/
    where?: commentaireWhereInput
  }


  /**
   * commentaire upsert
   */
  export type commentaireUpsertArgs = {
    /**
     * Select specific fields to fetch from the commentaire
     * 
    **/
    select?: commentaireSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentaireInclude | null
    /**
     * The filter to search for the commentaire to update in case it exists.
     * 
    **/
    where: commentaireWhereUniqueInput
    /**
     * In case the commentaire found by the `where` argument doesn't exist, create a new commentaire with this data.
     * 
    **/
    create: XOR<commentaireCreateInput, commentaireUncheckedCreateInput>
    /**
     * In case the commentaire was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<commentaireUpdateInput, commentaireUncheckedUpdateInput>
  }


  /**
   * commentaire delete
   */
  export type commentaireDeleteArgs = {
    /**
     * Select specific fields to fetch from the commentaire
     * 
    **/
    select?: commentaireSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentaireInclude | null
    /**
     * Filter which commentaire to delete.
     * 
    **/
    where: commentaireWhereUniqueInput
  }


  /**
   * commentaire deleteMany
   */
  export type commentaireDeleteManyArgs = {
    /**
     * Filter which commentaires to delete
     * 
    **/
    where?: commentaireWhereInput
  }


  /**
   * commentaire without action
   */
  export type commentaireArgs = {
    /**
     * Select specific fields to fetch from the commentaire
     * 
    **/
    select?: commentaireSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentaireInclude | null
  }



  /**
   * Model categorie
   */


  export type AggregateCategorie = {
    _count: CategorieCountAggregateOutputType | null
    _avg: CategorieAvgAggregateOutputType | null
    _sum: CategorieSumAggregateOutputType | null
    _min: CategorieMinAggregateOutputType | null
    _max: CategorieMaxAggregateOutputType | null
  }

  export type CategorieAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorieSumAggregateOutputType = {
    id: number | null
  }

  export type CategorieMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    nom: string | null
  }

  export type CategorieMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    nom: string | null
  }

  export type CategorieCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    nom: number
    _all: number
  }


  export type CategorieAvgAggregateInputType = {
    id?: true
  }

  export type CategorieSumAggregateInputType = {
    id?: true
  }

  export type CategorieMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    nom?: true
  }

  export type CategorieMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    nom?: true
  }

  export type CategorieCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    nom?: true
    _all?: true
  }

  export type CategorieAggregateArgs = {
    /**
     * Filter which categorie to aggregate.
     * 
    **/
    where?: categorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     * 
    **/
    orderBy?: Enumerable<categorieOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: categorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategorieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategorieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategorieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategorieMaxAggregateInputType
  }

  export type GetCategorieAggregateType<T extends CategorieAggregateArgs> = {
        [P in keyof T & keyof AggregateCategorie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategorie[P]>
      : GetScalarType<T[P], AggregateCategorie[P]>
  }




  export type CategorieGroupByArgs = {
    where?: categorieWhereInput
    orderBy?: Enumerable<categorieOrderByWithAggregationInput>
    by: Array<CategorieScalarFieldEnum>
    having?: categorieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategorieCountAggregateInputType | true
    _avg?: CategorieAvgAggregateInputType
    _sum?: CategorieSumAggregateInputType
    _min?: CategorieMinAggregateInputType
    _max?: CategorieMaxAggregateInputType
  }


  export type CategorieGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    nom: string
    _count: CategorieCountAggregateOutputType | null
    _avg: CategorieAvgAggregateOutputType | null
    _sum: CategorieSumAggregateOutputType | null
    _min: CategorieMinAggregateOutputType | null
    _max: CategorieMaxAggregateOutputType | null
  }

  type GetCategorieGroupByPayload<T extends CategorieGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategorieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategorieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategorieGroupByOutputType[P]>
            : GetScalarType<T[P], CategorieGroupByOutputType[P]>
        }
      >
    >


  export type categorieSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    nom?: boolean
    articles?: boolean | articleFindManyArgs
    _count?: boolean | CategorieCountOutputTypeArgs
  }

  export type categorieInclude = {
    articles?: boolean | articleFindManyArgs
    _count?: boolean | CategorieCountOutputTypeArgs
  }

  export type categorieGetPayload<
    S extends boolean | null | undefined | categorieArgs,
    U = keyof S
      > = S extends true
        ? categorie
    : S extends undefined
    ? never
    : S extends categorieArgs | categorieFindManyArgs
    ?'include' extends U
    ? categorie  & {
    [P in TrueKeys<S['include']>]:
        P extends 'articles' ? Array < articleGetPayload<S['include'][P]>>  :
        P extends '_count' ? CategorieCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'articles' ? Array < articleGetPayload<S['select'][P]>>  :
        P extends '_count' ? CategorieCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof categorie ? categorie[P] : never
  } 
    : categorie
  : categorie


  type categorieCountArgs = Merge<
    Omit<categorieFindManyArgs, 'select' | 'include'> & {
      select?: CategorieCountAggregateInputType | true
    }
  >

  export interface categorieDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Categorie that matches the filter.
     * @param {categorieFindUniqueArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categorieFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, categorieFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'categorie'> extends True ? CheckSelect<T, Prisma__categorieClient<categorie>, Prisma__categorieClient<categorieGetPayload<T>>> : CheckSelect<T, Prisma__categorieClient<categorie | null >, Prisma__categorieClient<categorieGetPayload<T> | null >>

    /**
     * Find the first Categorie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categorieFindFirstArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categorieFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, categorieFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'categorie'> extends True ? CheckSelect<T, Prisma__categorieClient<categorie>, Prisma__categorieClient<categorieGetPayload<T>>> : CheckSelect<T, Prisma__categorieClient<categorie | null >, Prisma__categorieClient<categorieGetPayload<T> | null >>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categorieFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categorie.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categorie.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categorieWithIdOnly = await prisma.categorie.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends categorieFindManyArgs>(
      args?: SelectSubset<T, categorieFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<categorie>>, PrismaPromise<Array<categorieGetPayload<T>>>>

    /**
     * Create a Categorie.
     * @param {categorieCreateArgs} args - Arguments to create a Categorie.
     * @example
     * // Create one Categorie
     * const Categorie = await prisma.categorie.create({
     *   data: {
     *     // ... data to create a Categorie
     *   }
     * })
     * 
    **/
    create<T extends categorieCreateArgs>(
      args: SelectSubset<T, categorieCreateArgs>
    ): CheckSelect<T, Prisma__categorieClient<categorie>, Prisma__categorieClient<categorieGetPayload<T>>>

    /**
     * Create many Categories.
     *     @param {categorieCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const categorie = await prisma.categorie.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categorieCreateManyArgs>(
      args?: SelectSubset<T, categorieCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Categorie.
     * @param {categorieDeleteArgs} args - Arguments to delete one Categorie.
     * @example
     * // Delete one Categorie
     * const Categorie = await prisma.categorie.delete({
     *   where: {
     *     // ... filter to delete one Categorie
     *   }
     * })
     * 
    **/
    delete<T extends categorieDeleteArgs>(
      args: SelectSubset<T, categorieDeleteArgs>
    ): CheckSelect<T, Prisma__categorieClient<categorie>, Prisma__categorieClient<categorieGetPayload<T>>>

    /**
     * Update one Categorie.
     * @param {categorieUpdateArgs} args - Arguments to update one Categorie.
     * @example
     * // Update one Categorie
     * const categorie = await prisma.categorie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categorieUpdateArgs>(
      args: SelectSubset<T, categorieUpdateArgs>
    ): CheckSelect<T, Prisma__categorieClient<categorie>, Prisma__categorieClient<categorieGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {categorieDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categorie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categorieDeleteManyArgs>(
      args?: SelectSubset<T, categorieDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categorieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categorie = await prisma.categorie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categorieUpdateManyArgs>(
      args: SelectSubset<T, categorieUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Categorie.
     * @param {categorieUpsertArgs} args - Arguments to update or create a Categorie.
     * @example
     * // Update or create a Categorie
     * const categorie = await prisma.categorie.upsert({
     *   create: {
     *     // ... data to create a Categorie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categorie we want to update
     *   }
     * })
    **/
    upsert<T extends categorieUpsertArgs>(
      args: SelectSubset<T, categorieUpsertArgs>
    ): CheckSelect<T, Prisma__categorieClient<categorie>, Prisma__categorieClient<categorieGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categorieCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categorie.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categorieCountArgs>(
      args?: Subset<T, categorieCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategorieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categorie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategorieAggregateArgs>(args: Subset<T, CategorieAggregateArgs>): PrismaPromise<GetCategorieAggregateType<T>>

    /**
     * Group by Categorie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategorieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategorieGroupByArgs['orderBy'] }
        : { orderBy?: CategorieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategorieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategorieGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for categorie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__categorieClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    articles<T extends articleFindManyArgs = {}>(args?: Subset<T, articleFindManyArgs>): CheckSelect<T, PrismaPromise<Array<article>>, PrismaPromise<Array<articleGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * categorie findUnique
   */
  export type categorieFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the categorie
     * 
    **/
    select?: categorieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categorieInclude | null
    /**
     * Throw an Error if a categorie can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which categorie to fetch.
     * 
    **/
    where: categorieWhereUniqueInput
  }


  /**
   * categorie findFirst
   */
  export type categorieFindFirstArgs = {
    /**
     * Select specific fields to fetch from the categorie
     * 
    **/
    select?: categorieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categorieInclude | null
    /**
     * Throw an Error if a categorie can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which categorie to fetch.
     * 
    **/
    where?: categorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     * 
    **/
    orderBy?: Enumerable<categorieOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     * 
    **/
    cursor?: categorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     * 
    **/
    distinct?: Enumerable<CategorieScalarFieldEnum>
  }


  /**
   * categorie findMany
   */
  export type categorieFindManyArgs = {
    /**
     * Select specific fields to fetch from the categorie
     * 
    **/
    select?: categorieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categorieInclude | null
    /**
     * Filter, which categories to fetch.
     * 
    **/
    where?: categorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     * 
    **/
    orderBy?: Enumerable<categorieOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     * 
    **/
    cursor?: categorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategorieScalarFieldEnum>
  }


  /**
   * categorie create
   */
  export type categorieCreateArgs = {
    /**
     * Select specific fields to fetch from the categorie
     * 
    **/
    select?: categorieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categorieInclude | null
    /**
     * The data needed to create a categorie.
     * 
    **/
    data: XOR<categorieCreateInput, categorieUncheckedCreateInput>
  }


  /**
   * categorie createMany
   */
  export type categorieCreateManyArgs = {
    /**
     * The data used to create many categories.
     * 
    **/
    data: Enumerable<categorieCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * categorie update
   */
  export type categorieUpdateArgs = {
    /**
     * Select specific fields to fetch from the categorie
     * 
    **/
    select?: categorieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categorieInclude | null
    /**
     * The data needed to update a categorie.
     * 
    **/
    data: XOR<categorieUpdateInput, categorieUncheckedUpdateInput>
    /**
     * Choose, which categorie to update.
     * 
    **/
    where: categorieWhereUniqueInput
  }


  /**
   * categorie updateMany
   */
  export type categorieUpdateManyArgs = {
    /**
     * The data used to update categories.
     * 
    **/
    data: XOR<categorieUpdateManyMutationInput, categorieUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     * 
    **/
    where?: categorieWhereInput
  }


  /**
   * categorie upsert
   */
  export type categorieUpsertArgs = {
    /**
     * Select specific fields to fetch from the categorie
     * 
    **/
    select?: categorieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categorieInclude | null
    /**
     * The filter to search for the categorie to update in case it exists.
     * 
    **/
    where: categorieWhereUniqueInput
    /**
     * In case the categorie found by the `where` argument doesn't exist, create a new categorie with this data.
     * 
    **/
    create: XOR<categorieCreateInput, categorieUncheckedCreateInput>
    /**
     * In case the categorie was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<categorieUpdateInput, categorieUncheckedUpdateInput>
  }


  /**
   * categorie delete
   */
  export type categorieDeleteArgs = {
    /**
     * Select specific fields to fetch from the categorie
     * 
    **/
    select?: categorieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categorieInclude | null
    /**
     * Filter which categorie to delete.
     * 
    **/
    where: categorieWhereUniqueInput
  }


  /**
   * categorie deleteMany
   */
  export type categorieDeleteManyArgs = {
    /**
     * Filter which categories to delete
     * 
    **/
    where?: categorieWhereInput
  }


  /**
   * categorie without action
   */
  export type categorieArgs = {
    /**
     * Select specific fields to fetch from the categorie
     * 
    **/
    select?: categorieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categorieInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    email: 'email',
    name: 'name',
    passwrd: 'passwrd',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ArticleScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    title: 'title',
    content: 'content',
    published: 'published',
    authorId: 'authorId',
    image: 'image'
  };

  export type ArticleScalarFieldEnum = (typeof ArticleScalarFieldEnum)[keyof typeof ArticleScalarFieldEnum]


  export const CommentaireScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    comment: 'comment',
    writtenById: 'writtenById',
    postId: 'postId'
  };

  export type CommentaireScalarFieldEnum = (typeof CommentaireScalarFieldEnum)[keyof typeof CommentaireScalarFieldEnum]


  export const CategorieScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    nom: 'nom'
  };

  export type CategorieScalarFieldEnum = (typeof CategorieScalarFieldEnum)[keyof typeof CategorieScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    email?: StringFilter | string
    name?: StringNullableFilter | string | null
    passwrd?: StringNullableFilter | string | null
    role?: EnumROLEFilter | ROLE
    comments?: CommentaireListRelationFilter
    posts?: ArticleListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    name?: SortOrder
    passwrd?: SortOrder
    role?: SortOrder
    comments?: commentaireOrderByRelationAggregateInput
    posts?: articleOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    name?: SortOrder
    passwrd?: SortOrder
    role?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userScalarWhereWithAggregatesInput>
    OR?: Enumerable<userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    email?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    passwrd?: StringNullableWithAggregatesFilter | string | null
    role?: EnumROLEWithAggregatesFilter | ROLE
  }

  export type articleWhereInput = {
    AND?: Enumerable<articleWhereInput>
    OR?: Enumerable<articleWhereInput>
    NOT?: Enumerable<articleWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    content?: StringNullableFilter | string | null
    published?: BoolFilter | boolean
    authorId?: IntFilter | number
    image?: StringNullableFilter | string | null
    author?: XOR<UserRelationFilter, userWhereInput>
    comments?: CommentaireListRelationFilter
    categor?: CategorieListRelationFilter
  }

  export type articleOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    authorId?: SortOrder
    image?: SortOrder
    author?: userOrderByWithRelationInput
    comments?: commentaireOrderByRelationAggregateInput
    categor?: categorieOrderByRelationAggregateInput
  }

  export type articleWhereUniqueInput = {
    id?: number
  }

  export type articleOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    authorId?: SortOrder
    image?: SortOrder
    _count?: articleCountOrderByAggregateInput
    _avg?: articleAvgOrderByAggregateInput
    _max?: articleMaxOrderByAggregateInput
    _min?: articleMinOrderByAggregateInput
    _sum?: articleSumOrderByAggregateInput
  }

  export type articleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<articleScalarWhereWithAggregatesInput>
    OR?: Enumerable<articleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<articleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    title?: StringWithAggregatesFilter | string
    content?: StringNullableWithAggregatesFilter | string | null
    published?: BoolWithAggregatesFilter | boolean
    authorId?: IntWithAggregatesFilter | number
    image?: StringNullableWithAggregatesFilter | string | null
  }

  export type commentaireWhereInput = {
    AND?: Enumerable<commentaireWhereInput>
    OR?: Enumerable<commentaireWhereInput>
    NOT?: Enumerable<commentaireWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    comment?: StringFilter | string
    writtenById?: IntFilter | number
    postId?: IntFilter | number
    writtenBy?: XOR<UserRelationFilter, userWhereInput>
    post?: XOR<ArticleRelationFilter, articleWhereInput>
  }

  export type commentaireOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    comment?: SortOrder
    writtenById?: SortOrder
    postId?: SortOrder
    writtenBy?: userOrderByWithRelationInput
    post?: articleOrderByWithRelationInput
  }

  export type commentaireWhereUniqueInput = {
    id?: number
  }

  export type commentaireOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    comment?: SortOrder
    writtenById?: SortOrder
    postId?: SortOrder
    _count?: commentaireCountOrderByAggregateInput
    _avg?: commentaireAvgOrderByAggregateInput
    _max?: commentaireMaxOrderByAggregateInput
    _min?: commentaireMinOrderByAggregateInput
    _sum?: commentaireSumOrderByAggregateInput
  }

  export type commentaireScalarWhereWithAggregatesInput = {
    AND?: Enumerable<commentaireScalarWhereWithAggregatesInput>
    OR?: Enumerable<commentaireScalarWhereWithAggregatesInput>
    NOT?: Enumerable<commentaireScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    comment?: StringWithAggregatesFilter | string
    writtenById?: IntWithAggregatesFilter | number
    postId?: IntWithAggregatesFilter | number
  }

  export type categorieWhereInput = {
    AND?: Enumerable<categorieWhereInput>
    OR?: Enumerable<categorieWhereInput>
    NOT?: Enumerable<categorieWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    nom?: StringFilter | string
    articles?: ArticleListRelationFilter
  }

  export type categorieOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nom?: SortOrder
    articles?: articleOrderByRelationAggregateInput
  }

  export type categorieWhereUniqueInput = {
    id?: number
  }

  export type categorieOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nom?: SortOrder
    _count?: categorieCountOrderByAggregateInput
    _avg?: categorieAvgOrderByAggregateInput
    _max?: categorieMaxOrderByAggregateInput
    _min?: categorieMinOrderByAggregateInput
    _sum?: categorieSumOrderByAggregateInput
  }

  export type categorieScalarWhereWithAggregatesInput = {
    AND?: Enumerable<categorieScalarWhereWithAggregatesInput>
    OR?: Enumerable<categorieScalarWhereWithAggregatesInput>
    NOT?: Enumerable<categorieScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    nom?: StringWithAggregatesFilter | string
  }

  export type userCreateInput = {
    createdAt?: Date | string
    email: string
    name?: string | null
    passwrd?: string | null
    role?: ROLE
    comments?: commentaireCreateNestedManyWithoutWrittenByInput
    posts?: articleCreateNestedManyWithoutAuthorInput
  }

  export type userUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    email: string
    name?: string | null
    passwrd?: string | null
    role?: ROLE
    comments?: commentaireUncheckedCreateNestedManyWithoutWrittenByInput
    posts?: articleUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type userUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwrd?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | ROLE
    comments?: commentaireUpdateManyWithoutWrittenByInput
    posts?: articleUpdateManyWithoutAuthorInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwrd?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | ROLE
    comments?: commentaireUncheckedUpdateManyWithoutWrittenByInput
    posts?: articleUncheckedUpdateManyWithoutAuthorInput
  }

  export type userCreateManyInput = {
    id?: number
    createdAt?: Date | string
    email: string
    name?: string | null
    passwrd?: string | null
    role?: ROLE
  }

  export type userUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwrd?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | ROLE
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwrd?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | ROLE
  }

  export type articleCreateInput = {
    createdAt?: Date | string
    title: string
    content?: string | null
    published?: boolean
    image?: string | null
    author: userCreateNestedOneWithoutPostsInput
    comments?: commentaireCreateNestedManyWithoutPostInput
    categor?: categorieCreateNestedManyWithoutArticlesInput
  }

  export type articleUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    title: string
    content?: string | null
    published?: boolean
    authorId: number
    image?: string | null
    comments?: commentaireUncheckedCreateNestedManyWithoutPostInput
    categor?: categorieUncheckedCreateNestedManyWithoutArticlesInput
  }

  export type articleUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    author?: userUpdateOneRequiredWithoutPostsInput
    comments?: commentaireUpdateManyWithoutPostInput
    categor?: categorieUpdateManyWithoutArticlesInput
  }

  export type articleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: commentaireUncheckedUpdateManyWithoutPostInput
    categor?: categorieUncheckedUpdateManyWithoutArticlesInput
  }

  export type articleCreateManyInput = {
    id?: number
    createdAt?: Date | string
    title: string
    content?: string | null
    published?: boolean
    authorId: number
    image?: string | null
  }

  export type articleUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type articleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type commentaireCreateInput = {
    createdAt?: Date | string
    comment: string
    writtenBy: userCreateNestedOneWithoutCommentsInput
    post: articleCreateNestedOneWithoutCommentsInput
  }

  export type commentaireUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    comment: string
    writtenById: number
    postId: number
  }

  export type commentaireUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
    writtenBy?: userUpdateOneRequiredWithoutCommentsInput
    post?: articleUpdateOneRequiredWithoutCommentsInput
  }

  export type commentaireUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
    writtenById?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type commentaireCreateManyInput = {
    id?: number
    createdAt?: Date | string
    comment: string
    writtenById: number
    postId: number
  }

  export type commentaireUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
  }

  export type commentaireUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
    writtenById?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type categorieCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    nom: string
    articles?: articleCreateNestedManyWithoutCategorInput
  }

  export type categorieUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    nom: string
    articles?: articleUncheckedCreateNestedManyWithoutCategorInput
  }

  export type categorieUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nom?: StringFieldUpdateOperationsInput | string
    articles?: articleUpdateManyWithoutCategorInput
  }

  export type categorieUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nom?: StringFieldUpdateOperationsInput | string
    articles?: articleUncheckedUpdateManyWithoutCategorInput
  }

  export type categorieCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    nom: string
  }

  export type categorieUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type categorieUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type EnumROLEFilter = {
    equals?: ROLE
    in?: Enumerable<ROLE>
    notIn?: Enumerable<ROLE>
    not?: NestedEnumROLEFilter | ROLE
  }

  export type CommentaireListRelationFilter = {
    every?: commentaireWhereInput
    some?: commentaireWhereInput
    none?: commentaireWhereInput
  }

  export type ArticleListRelationFilter = {
    every?: articleWhereInput
    some?: articleWhereInput
    none?: articleWhereInput
  }

  export type commentaireOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type articleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    name?: SortOrder
    passwrd?: SortOrder
    role?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    name?: SortOrder
    passwrd?: SortOrder
    role?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    name?: SortOrder
    passwrd?: SortOrder
    role?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumROLEWithAggregatesFilter = {
    equals?: ROLE
    in?: Enumerable<ROLE>
    notIn?: Enumerable<ROLE>
    not?: NestedEnumROLEWithAggregatesFilter | ROLE
    _count?: NestedIntFilter
    _min?: NestedEnumROLEFilter
    _max?: NestedEnumROLEFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type CategorieListRelationFilter = {
    every?: categorieWhereInput
    some?: categorieWhereInput
    none?: categorieWhereInput
  }

  export type categorieOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type articleCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    authorId?: SortOrder
    image?: SortOrder
  }

  export type articleAvgOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type articleMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    authorId?: SortOrder
    image?: SortOrder
  }

  export type articleMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    authorId?: SortOrder
    image?: SortOrder
  }

  export type articleSumOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type ArticleRelationFilter = {
    is?: articleWhereInput
    isNot?: articleWhereInput
  }

  export type commentaireCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    comment?: SortOrder
    writtenById?: SortOrder
    postId?: SortOrder
  }

  export type commentaireAvgOrderByAggregateInput = {
    id?: SortOrder
    writtenById?: SortOrder
    postId?: SortOrder
  }

  export type commentaireMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    comment?: SortOrder
    writtenById?: SortOrder
    postId?: SortOrder
  }

  export type commentaireMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    comment?: SortOrder
    writtenById?: SortOrder
    postId?: SortOrder
  }

  export type commentaireSumOrderByAggregateInput = {
    id?: SortOrder
    writtenById?: SortOrder
    postId?: SortOrder
  }

  export type categorieCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nom?: SortOrder
  }

  export type categorieAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type categorieMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nom?: SortOrder
  }

  export type categorieMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nom?: SortOrder
  }

  export type categorieSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type commentaireCreateNestedManyWithoutWrittenByInput = {
    create?: XOR<Enumerable<commentaireCreateWithoutWrittenByInput>, Enumerable<commentaireUncheckedCreateWithoutWrittenByInput>>
    connectOrCreate?: Enumerable<commentaireCreateOrConnectWithoutWrittenByInput>
    createMany?: commentaireCreateManyWrittenByInputEnvelope
    connect?: Enumerable<commentaireWhereUniqueInput>
  }

  export type articleCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<articleCreateWithoutAuthorInput>, Enumerable<articleUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<articleCreateOrConnectWithoutAuthorInput>
    createMany?: articleCreateManyAuthorInputEnvelope
    connect?: Enumerable<articleWhereUniqueInput>
  }

  export type commentaireUncheckedCreateNestedManyWithoutWrittenByInput = {
    create?: XOR<Enumerable<commentaireCreateWithoutWrittenByInput>, Enumerable<commentaireUncheckedCreateWithoutWrittenByInput>>
    connectOrCreate?: Enumerable<commentaireCreateOrConnectWithoutWrittenByInput>
    createMany?: commentaireCreateManyWrittenByInputEnvelope
    connect?: Enumerable<commentaireWhereUniqueInput>
  }

  export type articleUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<articleCreateWithoutAuthorInput>, Enumerable<articleUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<articleCreateOrConnectWithoutAuthorInput>
    createMany?: articleCreateManyAuthorInputEnvelope
    connect?: Enumerable<articleWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumROLEFieldUpdateOperationsInput = {
    set?: ROLE
  }

  export type commentaireUpdateManyWithoutWrittenByInput = {
    create?: XOR<Enumerable<commentaireCreateWithoutWrittenByInput>, Enumerable<commentaireUncheckedCreateWithoutWrittenByInput>>
    connectOrCreate?: Enumerable<commentaireCreateOrConnectWithoutWrittenByInput>
    upsert?: Enumerable<commentaireUpsertWithWhereUniqueWithoutWrittenByInput>
    createMany?: commentaireCreateManyWrittenByInputEnvelope
    set?: Enumerable<commentaireWhereUniqueInput>
    disconnect?: Enumerable<commentaireWhereUniqueInput>
    delete?: Enumerable<commentaireWhereUniqueInput>
    connect?: Enumerable<commentaireWhereUniqueInput>
    update?: Enumerable<commentaireUpdateWithWhereUniqueWithoutWrittenByInput>
    updateMany?: Enumerable<commentaireUpdateManyWithWhereWithoutWrittenByInput>
    deleteMany?: Enumerable<commentaireScalarWhereInput>
  }

  export type articleUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<articleCreateWithoutAuthorInput>, Enumerable<articleUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<articleCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<articleUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: articleCreateManyAuthorInputEnvelope
    set?: Enumerable<articleWhereUniqueInput>
    disconnect?: Enumerable<articleWhereUniqueInput>
    delete?: Enumerable<articleWhereUniqueInput>
    connect?: Enumerable<articleWhereUniqueInput>
    update?: Enumerable<articleUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<articleUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<articleScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type commentaireUncheckedUpdateManyWithoutWrittenByInput = {
    create?: XOR<Enumerable<commentaireCreateWithoutWrittenByInput>, Enumerable<commentaireUncheckedCreateWithoutWrittenByInput>>
    connectOrCreate?: Enumerable<commentaireCreateOrConnectWithoutWrittenByInput>
    upsert?: Enumerable<commentaireUpsertWithWhereUniqueWithoutWrittenByInput>
    createMany?: commentaireCreateManyWrittenByInputEnvelope
    set?: Enumerable<commentaireWhereUniqueInput>
    disconnect?: Enumerable<commentaireWhereUniqueInput>
    delete?: Enumerable<commentaireWhereUniqueInput>
    connect?: Enumerable<commentaireWhereUniqueInput>
    update?: Enumerable<commentaireUpdateWithWhereUniqueWithoutWrittenByInput>
    updateMany?: Enumerable<commentaireUpdateManyWithWhereWithoutWrittenByInput>
    deleteMany?: Enumerable<commentaireScalarWhereInput>
  }

  export type articleUncheckedUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<articleCreateWithoutAuthorInput>, Enumerable<articleUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<articleCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<articleUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: articleCreateManyAuthorInputEnvelope
    set?: Enumerable<articleWhereUniqueInput>
    disconnect?: Enumerable<articleWhereUniqueInput>
    delete?: Enumerable<articleWhereUniqueInput>
    connect?: Enumerable<articleWhereUniqueInput>
    update?: Enumerable<articleUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<articleUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<articleScalarWhereInput>
  }

  export type userCreateNestedOneWithoutPostsInput = {
    create?: XOR<userCreateWithoutPostsInput, userUncheckedCreateWithoutPostsInput>
    connectOrCreate?: userCreateOrConnectWithoutPostsInput
    connect?: userWhereUniqueInput
  }

  export type commentaireCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<commentaireCreateWithoutPostInput>, Enumerable<commentaireUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<commentaireCreateOrConnectWithoutPostInput>
    createMany?: commentaireCreateManyPostInputEnvelope
    connect?: Enumerable<commentaireWhereUniqueInput>
  }

  export type categorieCreateNestedManyWithoutArticlesInput = {
    create?: XOR<Enumerable<categorieCreateWithoutArticlesInput>, Enumerable<categorieUncheckedCreateWithoutArticlesInput>>
    connectOrCreate?: Enumerable<categorieCreateOrConnectWithoutArticlesInput>
    connect?: Enumerable<categorieWhereUniqueInput>
  }

  export type commentaireUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<commentaireCreateWithoutPostInput>, Enumerable<commentaireUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<commentaireCreateOrConnectWithoutPostInput>
    createMany?: commentaireCreateManyPostInputEnvelope
    connect?: Enumerable<commentaireWhereUniqueInput>
  }

  export type categorieUncheckedCreateNestedManyWithoutArticlesInput = {
    create?: XOR<Enumerable<categorieCreateWithoutArticlesInput>, Enumerable<categorieUncheckedCreateWithoutArticlesInput>>
    connectOrCreate?: Enumerable<categorieCreateOrConnectWithoutArticlesInput>
    connect?: Enumerable<categorieWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type userUpdateOneRequiredWithoutPostsInput = {
    create?: XOR<userCreateWithoutPostsInput, userUncheckedCreateWithoutPostsInput>
    connectOrCreate?: userCreateOrConnectWithoutPostsInput
    upsert?: userUpsertWithoutPostsInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutPostsInput, userUncheckedUpdateWithoutPostsInput>
  }

  export type commentaireUpdateManyWithoutPostInput = {
    create?: XOR<Enumerable<commentaireCreateWithoutPostInput>, Enumerable<commentaireUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<commentaireCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<commentaireUpsertWithWhereUniqueWithoutPostInput>
    createMany?: commentaireCreateManyPostInputEnvelope
    set?: Enumerable<commentaireWhereUniqueInput>
    disconnect?: Enumerable<commentaireWhereUniqueInput>
    delete?: Enumerable<commentaireWhereUniqueInput>
    connect?: Enumerable<commentaireWhereUniqueInput>
    update?: Enumerable<commentaireUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<commentaireUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<commentaireScalarWhereInput>
  }

  export type categorieUpdateManyWithoutArticlesInput = {
    create?: XOR<Enumerable<categorieCreateWithoutArticlesInput>, Enumerable<categorieUncheckedCreateWithoutArticlesInput>>
    connectOrCreate?: Enumerable<categorieCreateOrConnectWithoutArticlesInput>
    upsert?: Enumerable<categorieUpsertWithWhereUniqueWithoutArticlesInput>
    set?: Enumerable<categorieWhereUniqueInput>
    disconnect?: Enumerable<categorieWhereUniqueInput>
    delete?: Enumerable<categorieWhereUniqueInput>
    connect?: Enumerable<categorieWhereUniqueInput>
    update?: Enumerable<categorieUpdateWithWhereUniqueWithoutArticlesInput>
    updateMany?: Enumerable<categorieUpdateManyWithWhereWithoutArticlesInput>
    deleteMany?: Enumerable<categorieScalarWhereInput>
  }

  export type commentaireUncheckedUpdateManyWithoutPostInput = {
    create?: XOR<Enumerable<commentaireCreateWithoutPostInput>, Enumerable<commentaireUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<commentaireCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<commentaireUpsertWithWhereUniqueWithoutPostInput>
    createMany?: commentaireCreateManyPostInputEnvelope
    set?: Enumerable<commentaireWhereUniqueInput>
    disconnect?: Enumerable<commentaireWhereUniqueInput>
    delete?: Enumerable<commentaireWhereUniqueInput>
    connect?: Enumerable<commentaireWhereUniqueInput>
    update?: Enumerable<commentaireUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<commentaireUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<commentaireScalarWhereInput>
  }

  export type categorieUncheckedUpdateManyWithoutArticlesInput = {
    create?: XOR<Enumerable<categorieCreateWithoutArticlesInput>, Enumerable<categorieUncheckedCreateWithoutArticlesInput>>
    connectOrCreate?: Enumerable<categorieCreateOrConnectWithoutArticlesInput>
    upsert?: Enumerable<categorieUpsertWithWhereUniqueWithoutArticlesInput>
    set?: Enumerable<categorieWhereUniqueInput>
    disconnect?: Enumerable<categorieWhereUniqueInput>
    delete?: Enumerable<categorieWhereUniqueInput>
    connect?: Enumerable<categorieWhereUniqueInput>
    update?: Enumerable<categorieUpdateWithWhereUniqueWithoutArticlesInput>
    updateMany?: Enumerable<categorieUpdateManyWithWhereWithoutArticlesInput>
    deleteMany?: Enumerable<categorieScalarWhereInput>
  }

  export type userCreateNestedOneWithoutCommentsInput = {
    create?: XOR<userCreateWithoutCommentsInput, userUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: userCreateOrConnectWithoutCommentsInput
    connect?: userWhereUniqueInput
  }

  export type articleCreateNestedOneWithoutCommentsInput = {
    create?: XOR<articleCreateWithoutCommentsInput, articleUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: articleCreateOrConnectWithoutCommentsInput
    connect?: articleWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutCommentsInput = {
    create?: XOR<userCreateWithoutCommentsInput, userUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: userCreateOrConnectWithoutCommentsInput
    upsert?: userUpsertWithoutCommentsInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutCommentsInput, userUncheckedUpdateWithoutCommentsInput>
  }

  export type articleUpdateOneRequiredWithoutCommentsInput = {
    create?: XOR<articleCreateWithoutCommentsInput, articleUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: articleCreateOrConnectWithoutCommentsInput
    upsert?: articleUpsertWithoutCommentsInput
    connect?: articleWhereUniqueInput
    update?: XOR<articleUpdateWithoutCommentsInput, articleUncheckedUpdateWithoutCommentsInput>
  }

  export type articleCreateNestedManyWithoutCategorInput = {
    create?: XOR<Enumerable<articleCreateWithoutCategorInput>, Enumerable<articleUncheckedCreateWithoutCategorInput>>
    connectOrCreate?: Enumerable<articleCreateOrConnectWithoutCategorInput>
    connect?: Enumerable<articleWhereUniqueInput>
  }

  export type articleUncheckedCreateNestedManyWithoutCategorInput = {
    create?: XOR<Enumerable<articleCreateWithoutCategorInput>, Enumerable<articleUncheckedCreateWithoutCategorInput>>
    connectOrCreate?: Enumerable<articleCreateOrConnectWithoutCategorInput>
    connect?: Enumerable<articleWhereUniqueInput>
  }

  export type articleUpdateManyWithoutCategorInput = {
    create?: XOR<Enumerable<articleCreateWithoutCategorInput>, Enumerable<articleUncheckedCreateWithoutCategorInput>>
    connectOrCreate?: Enumerable<articleCreateOrConnectWithoutCategorInput>
    upsert?: Enumerable<articleUpsertWithWhereUniqueWithoutCategorInput>
    set?: Enumerable<articleWhereUniqueInput>
    disconnect?: Enumerable<articleWhereUniqueInput>
    delete?: Enumerable<articleWhereUniqueInput>
    connect?: Enumerable<articleWhereUniqueInput>
    update?: Enumerable<articleUpdateWithWhereUniqueWithoutCategorInput>
    updateMany?: Enumerable<articleUpdateManyWithWhereWithoutCategorInput>
    deleteMany?: Enumerable<articleScalarWhereInput>
  }

  export type articleUncheckedUpdateManyWithoutCategorInput = {
    create?: XOR<Enumerable<articleCreateWithoutCategorInput>, Enumerable<articleUncheckedCreateWithoutCategorInput>>
    connectOrCreate?: Enumerable<articleCreateOrConnectWithoutCategorInput>
    upsert?: Enumerable<articleUpsertWithWhereUniqueWithoutCategorInput>
    set?: Enumerable<articleWhereUniqueInput>
    disconnect?: Enumerable<articleWhereUniqueInput>
    delete?: Enumerable<articleWhereUniqueInput>
    connect?: Enumerable<articleWhereUniqueInput>
    update?: Enumerable<articleUpdateWithWhereUniqueWithoutCategorInput>
    updateMany?: Enumerable<articleUpdateManyWithWhereWithoutCategorInput>
    deleteMany?: Enumerable<articleScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumROLEFilter = {
    equals?: ROLE
    in?: Enumerable<ROLE>
    notIn?: Enumerable<ROLE>
    not?: NestedEnumROLEFilter | ROLE
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumROLEWithAggregatesFilter = {
    equals?: ROLE
    in?: Enumerable<ROLE>
    notIn?: Enumerable<ROLE>
    not?: NestedEnumROLEWithAggregatesFilter | ROLE
    _count?: NestedIntFilter
    _min?: NestedEnumROLEFilter
    _max?: NestedEnumROLEFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type commentaireCreateWithoutWrittenByInput = {
    createdAt?: Date | string
    comment: string
    post: articleCreateNestedOneWithoutCommentsInput
  }

  export type commentaireUncheckedCreateWithoutWrittenByInput = {
    id?: number
    createdAt?: Date | string
    comment: string
    postId: number
  }

  export type commentaireCreateOrConnectWithoutWrittenByInput = {
    where: commentaireWhereUniqueInput
    create: XOR<commentaireCreateWithoutWrittenByInput, commentaireUncheckedCreateWithoutWrittenByInput>
  }

  export type commentaireCreateManyWrittenByInputEnvelope = {
    data: Enumerable<commentaireCreateManyWrittenByInput>
    skipDuplicates?: boolean
  }

  export type articleCreateWithoutAuthorInput = {
    createdAt?: Date | string
    title: string
    content?: string | null
    published?: boolean
    image?: string | null
    comments?: commentaireCreateNestedManyWithoutPostInput
    categor?: categorieCreateNestedManyWithoutArticlesInput
  }

  export type articleUncheckedCreateWithoutAuthorInput = {
    id?: number
    createdAt?: Date | string
    title: string
    content?: string | null
    published?: boolean
    image?: string | null
    comments?: commentaireUncheckedCreateNestedManyWithoutPostInput
    categor?: categorieUncheckedCreateNestedManyWithoutArticlesInput
  }

  export type articleCreateOrConnectWithoutAuthorInput = {
    where: articleWhereUniqueInput
    create: XOR<articleCreateWithoutAuthorInput, articleUncheckedCreateWithoutAuthorInput>
  }

  export type articleCreateManyAuthorInputEnvelope = {
    data: Enumerable<articleCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type commentaireUpsertWithWhereUniqueWithoutWrittenByInput = {
    where: commentaireWhereUniqueInput
    update: XOR<commentaireUpdateWithoutWrittenByInput, commentaireUncheckedUpdateWithoutWrittenByInput>
    create: XOR<commentaireCreateWithoutWrittenByInput, commentaireUncheckedCreateWithoutWrittenByInput>
  }

  export type commentaireUpdateWithWhereUniqueWithoutWrittenByInput = {
    where: commentaireWhereUniqueInput
    data: XOR<commentaireUpdateWithoutWrittenByInput, commentaireUncheckedUpdateWithoutWrittenByInput>
  }

  export type commentaireUpdateManyWithWhereWithoutWrittenByInput = {
    where: commentaireScalarWhereInput
    data: XOR<commentaireUpdateManyMutationInput, commentaireUncheckedUpdateManyWithoutCommentsInput>
  }

  export type commentaireScalarWhereInput = {
    AND?: Enumerable<commentaireScalarWhereInput>
    OR?: Enumerable<commentaireScalarWhereInput>
    NOT?: Enumerable<commentaireScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    comment?: StringFilter | string
    writtenById?: IntFilter | number
    postId?: IntFilter | number
  }

  export type articleUpsertWithWhereUniqueWithoutAuthorInput = {
    where: articleWhereUniqueInput
    update: XOR<articleUpdateWithoutAuthorInput, articleUncheckedUpdateWithoutAuthorInput>
    create: XOR<articleCreateWithoutAuthorInput, articleUncheckedCreateWithoutAuthorInput>
  }

  export type articleUpdateWithWhereUniqueWithoutAuthorInput = {
    where: articleWhereUniqueInput
    data: XOR<articleUpdateWithoutAuthorInput, articleUncheckedUpdateWithoutAuthorInput>
  }

  export type articleUpdateManyWithWhereWithoutAuthorInput = {
    where: articleScalarWhereInput
    data: XOR<articleUpdateManyMutationInput, articleUncheckedUpdateManyWithoutPostsInput>
  }

  export type articleScalarWhereInput = {
    AND?: Enumerable<articleScalarWhereInput>
    OR?: Enumerable<articleScalarWhereInput>
    NOT?: Enumerable<articleScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    content?: StringNullableFilter | string | null
    published?: BoolFilter | boolean
    authorId?: IntFilter | number
    image?: StringNullableFilter | string | null
  }

  export type userCreateWithoutPostsInput = {
    createdAt?: Date | string
    email: string
    name?: string | null
    passwrd?: string | null
    role?: ROLE
    comments?: commentaireCreateNestedManyWithoutWrittenByInput
  }

  export type userUncheckedCreateWithoutPostsInput = {
    id?: number
    createdAt?: Date | string
    email: string
    name?: string | null
    passwrd?: string | null
    role?: ROLE
    comments?: commentaireUncheckedCreateNestedManyWithoutWrittenByInput
  }

  export type userCreateOrConnectWithoutPostsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutPostsInput, userUncheckedCreateWithoutPostsInput>
  }

  export type commentaireCreateWithoutPostInput = {
    createdAt?: Date | string
    comment: string
    writtenBy: userCreateNestedOneWithoutCommentsInput
  }

  export type commentaireUncheckedCreateWithoutPostInput = {
    id?: number
    createdAt?: Date | string
    comment: string
    writtenById: number
  }

  export type commentaireCreateOrConnectWithoutPostInput = {
    where: commentaireWhereUniqueInput
    create: XOR<commentaireCreateWithoutPostInput, commentaireUncheckedCreateWithoutPostInput>
  }

  export type commentaireCreateManyPostInputEnvelope = {
    data: Enumerable<commentaireCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type categorieCreateWithoutArticlesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    nom: string
  }

  export type categorieUncheckedCreateWithoutArticlesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    nom: string
  }

  export type categorieCreateOrConnectWithoutArticlesInput = {
    where: categorieWhereUniqueInput
    create: XOR<categorieCreateWithoutArticlesInput, categorieUncheckedCreateWithoutArticlesInput>
  }

  export type userUpsertWithoutPostsInput = {
    update: XOR<userUpdateWithoutPostsInput, userUncheckedUpdateWithoutPostsInput>
    create: XOR<userCreateWithoutPostsInput, userUncheckedCreateWithoutPostsInput>
  }

  export type userUpdateWithoutPostsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwrd?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | ROLE
    comments?: commentaireUpdateManyWithoutWrittenByInput
  }

  export type userUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwrd?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | ROLE
    comments?: commentaireUncheckedUpdateManyWithoutWrittenByInput
  }

  export type commentaireUpsertWithWhereUniqueWithoutPostInput = {
    where: commentaireWhereUniqueInput
    update: XOR<commentaireUpdateWithoutPostInput, commentaireUncheckedUpdateWithoutPostInput>
    create: XOR<commentaireCreateWithoutPostInput, commentaireUncheckedCreateWithoutPostInput>
  }

  export type commentaireUpdateWithWhereUniqueWithoutPostInput = {
    where: commentaireWhereUniqueInput
    data: XOR<commentaireUpdateWithoutPostInput, commentaireUncheckedUpdateWithoutPostInput>
  }

  export type commentaireUpdateManyWithWhereWithoutPostInput = {
    where: commentaireScalarWhereInput
    data: XOR<commentaireUpdateManyMutationInput, commentaireUncheckedUpdateManyWithoutCommentsInput>
  }

  export type categorieUpsertWithWhereUniqueWithoutArticlesInput = {
    where: categorieWhereUniqueInput
    update: XOR<categorieUpdateWithoutArticlesInput, categorieUncheckedUpdateWithoutArticlesInput>
    create: XOR<categorieCreateWithoutArticlesInput, categorieUncheckedCreateWithoutArticlesInput>
  }

  export type categorieUpdateWithWhereUniqueWithoutArticlesInput = {
    where: categorieWhereUniqueInput
    data: XOR<categorieUpdateWithoutArticlesInput, categorieUncheckedUpdateWithoutArticlesInput>
  }

  export type categorieUpdateManyWithWhereWithoutArticlesInput = {
    where: categorieScalarWhereInput
    data: XOR<categorieUpdateManyMutationInput, categorieUncheckedUpdateManyWithoutCategorInput>
  }

  export type categorieScalarWhereInput = {
    AND?: Enumerable<categorieScalarWhereInput>
    OR?: Enumerable<categorieScalarWhereInput>
    NOT?: Enumerable<categorieScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    nom?: StringFilter | string
  }

  export type userCreateWithoutCommentsInput = {
    createdAt?: Date | string
    email: string
    name?: string | null
    passwrd?: string | null
    role?: ROLE
    posts?: articleCreateNestedManyWithoutAuthorInput
  }

  export type userUncheckedCreateWithoutCommentsInput = {
    id?: number
    createdAt?: Date | string
    email: string
    name?: string | null
    passwrd?: string | null
    role?: ROLE
    posts?: articleUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type userCreateOrConnectWithoutCommentsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutCommentsInput, userUncheckedCreateWithoutCommentsInput>
  }

  export type articleCreateWithoutCommentsInput = {
    createdAt?: Date | string
    title: string
    content?: string | null
    published?: boolean
    image?: string | null
    author: userCreateNestedOneWithoutPostsInput
    categor?: categorieCreateNestedManyWithoutArticlesInput
  }

  export type articleUncheckedCreateWithoutCommentsInput = {
    id?: number
    createdAt?: Date | string
    title: string
    content?: string | null
    published?: boolean
    authorId: number
    image?: string | null
    categor?: categorieUncheckedCreateNestedManyWithoutArticlesInput
  }

  export type articleCreateOrConnectWithoutCommentsInput = {
    where: articleWhereUniqueInput
    create: XOR<articleCreateWithoutCommentsInput, articleUncheckedCreateWithoutCommentsInput>
  }

  export type userUpsertWithoutCommentsInput = {
    update: XOR<userUpdateWithoutCommentsInput, userUncheckedUpdateWithoutCommentsInput>
    create: XOR<userCreateWithoutCommentsInput, userUncheckedCreateWithoutCommentsInput>
  }

  export type userUpdateWithoutCommentsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwrd?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | ROLE
    posts?: articleUpdateManyWithoutAuthorInput
  }

  export type userUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwrd?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | ROLE
    posts?: articleUncheckedUpdateManyWithoutAuthorInput
  }

  export type articleUpsertWithoutCommentsInput = {
    update: XOR<articleUpdateWithoutCommentsInput, articleUncheckedUpdateWithoutCommentsInput>
    create: XOR<articleCreateWithoutCommentsInput, articleUncheckedCreateWithoutCommentsInput>
  }

  export type articleUpdateWithoutCommentsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    author?: userUpdateOneRequiredWithoutPostsInput
    categor?: categorieUpdateManyWithoutArticlesInput
  }

  export type articleUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    categor?: categorieUncheckedUpdateManyWithoutArticlesInput
  }

  export type articleCreateWithoutCategorInput = {
    createdAt?: Date | string
    title: string
    content?: string | null
    published?: boolean
    image?: string | null
    author: userCreateNestedOneWithoutPostsInput
    comments?: commentaireCreateNestedManyWithoutPostInput
  }

  export type articleUncheckedCreateWithoutCategorInput = {
    id?: number
    createdAt?: Date | string
    title: string
    content?: string | null
    published?: boolean
    authorId: number
    image?: string | null
    comments?: commentaireUncheckedCreateNestedManyWithoutPostInput
  }

  export type articleCreateOrConnectWithoutCategorInput = {
    where: articleWhereUniqueInput
    create: XOR<articleCreateWithoutCategorInput, articleUncheckedCreateWithoutCategorInput>
  }

  export type articleUpsertWithWhereUniqueWithoutCategorInput = {
    where: articleWhereUniqueInput
    update: XOR<articleUpdateWithoutCategorInput, articleUncheckedUpdateWithoutCategorInput>
    create: XOR<articleCreateWithoutCategorInput, articleUncheckedCreateWithoutCategorInput>
  }

  export type articleUpdateWithWhereUniqueWithoutCategorInput = {
    where: articleWhereUniqueInput
    data: XOR<articleUpdateWithoutCategorInput, articleUncheckedUpdateWithoutCategorInput>
  }

  export type articleUpdateManyWithWhereWithoutCategorInput = {
    where: articleScalarWhereInput
    data: XOR<articleUpdateManyMutationInput, articleUncheckedUpdateManyWithoutArticlesInput>
  }

  export type commentaireCreateManyWrittenByInput = {
    id?: number
    createdAt?: Date | string
    comment: string
    postId: number
  }

  export type articleCreateManyAuthorInput = {
    id?: number
    createdAt?: Date | string
    title: string
    content?: string | null
    published?: boolean
    image?: string | null
  }

  export type commentaireUpdateWithoutWrittenByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
    post?: articleUpdateOneRequiredWithoutCommentsInput
  }

  export type commentaireUncheckedUpdateWithoutWrittenByInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type commentaireUncheckedUpdateManyWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type articleUpdateWithoutAuthorInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: commentaireUpdateManyWithoutPostInput
    categor?: categorieUpdateManyWithoutArticlesInput
  }

  export type articleUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: commentaireUncheckedUpdateManyWithoutPostInput
    categor?: categorieUncheckedUpdateManyWithoutArticlesInput
  }

  export type articleUncheckedUpdateManyWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type commentaireCreateManyPostInput = {
    id?: number
    createdAt?: Date | string
    comment: string
    writtenById: number
  }

  export type commentaireUpdateWithoutPostInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
    writtenBy?: userUpdateOneRequiredWithoutCommentsInput
  }

  export type commentaireUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
    writtenById?: IntFieldUpdateOperationsInput | number
  }

  export type categorieUpdateWithoutArticlesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type categorieUncheckedUpdateWithoutArticlesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type categorieUncheckedUpdateManyWithoutCategorInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type articleUpdateWithoutCategorInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    author?: userUpdateOneRequiredWithoutPostsInput
    comments?: commentaireUpdateManyWithoutPostInput
  }

  export type articleUncheckedUpdateWithoutCategorInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: commentaireUncheckedUpdateManyWithoutPostInput
  }

  export type articleUncheckedUpdateManyWithoutArticlesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}